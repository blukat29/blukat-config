# ~/.bashrc

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

LITE=false
[ -f "$HOME/.bashrc.lite" ] && LITE=true

### Environment variables

    # Before doing anything, replace OSX terminal tools with gnu version tools
    if [[ "$OSTYPE" == "darwin"* ]]; then
      export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
      export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
      export PATH="/opt/homebrew/bin:$PATH"
      export PATH="/usr/local/bin:$PATH"
      DOTFILES_DIR="$( cd "$( dirname $(greadlink -e "${BASH_SOURCE[0]}") )" && pwd )"
    else
      DOTFILES_DIR="$( cd "$( dirname $(readlink -e "${BASH_SOURCE[0]}") )" && pwd )"
    fi

    # PATHs
    SCRIPTS_DIR="$DOTFILES_DIR/../scripts"
    export PATH="$PATH:$SCRIPTS_DIR"
    export PATH="$PATH:/usr/local/bin"
    export PATH="$PATH:/usr/local/sbin"
    export PATH="$PATH:/usr/local/sbin"
    export PATH="$PATH:$HOME/.local/bin"
    export PATH="$PATH:$HOME/.local/android-sdk/tools"
    export PATH="$PATH:$HOME/.local/android-sdk/tools/bin"
    export PATH="$PATH:$HOME/.local/android-sdk/platform-tools"
    export PATH="$PATH:$HOME/.local/android-ndk"
    export PATH="$PATH:$HOME/.local/depot_tools"
    export PATH="$PATH:$HOME/.foundry/bin"
    export PATH="$PATH:$HOME/Library/Android/sdk/platform-tools"
    export PATH="$PATH:/Library/TeX/Distributions/.DefaultTeX/Contents/Programs/texbin"
    export PATH="$HOME/go/bin/:$PATH"
    export PATH="$HOME/.foundry/bin:$PATH"
    export PATH="$HOME/klay/klaytn/build/bin/:$PATH"

    if which python3 >/dev/null; then
        export PATH="$PATH:$(python3 -m site --user-base)/bin"
    fi
    if which python >/dev/null; then
        export PATH="$PATH:$(python -m site --user-base)/bin"
    fi

    export GOROOT="/usr/local/go"
    export GOPATH="$HOME/.local/go"
    export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
    export NVM_DIR="$HOME/.nvm"
    export SDKMAN_DIR="$HOME/.sdkman"

    # Do not include empty string (interpreted as CWD) in LD_LIBRARY_PATH.
    if [ -z "$LD_LIBRARY_PATH" ]; then
        export LD_LIBRARY_PATH="/lib"
    else
        export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/lib"
    fi
    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/"
    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib/"
    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/.local/lib/"

    # Other options
    export XDG_CONFIG_HOME="$HOME/.config"
    export XDG_DATA_HOME="$HOME/.config"
    export LESSHISTFILE=/dev/null
    export HISTCONTROL=ignoreboth # don't put duplicate items in bash_history
    export PYTHONSTARTUP="$DOTFILES_DIR/pythonrc.py"
    export MYSQL_HISTFILE="$HOME/.config/.mysql_history"
    export REDISCLI_HISTFILE="$HOME/.config/.rediscli_history"
    export NODE_REPL_HISTORY="$HOME/.config/.node_repl_history"
    export MPLCONFIGDIR="$HOME/.config/matplotlib"
    export npm_config_devdir="$HOME/.config/node-gyp"
    export WGET_HSTS_FILE="$HOME/.config/.wget-hsts"
    mkdir -p "$XDG_DATA_HOME/tig/history"
    mkdir -p "$HOME/.local/share/tig/history"

    export LS_COLORS="di=1;94"
    export GPG_TTY=$(tty)
    export LANG="en_US.UTF-8"
    export LC_ALL="en_US.UTF-8"

### Bash prompt

    if $LITE; then
        PS1="\[\033[1;32m\]\u.\h\033[0m\]:\[\033[1;94m\]\w\033[0m\]$ "
    else
    # Enable git-prompt
    source $SCRIPTS_DIR/git-prompt.sh
    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWSTASHSTATE=1
    export GIT_PS1_SHOWUNTRACKEDFILES=1

    # Enable kube-prompt
    source $SCRIPTS_DIR/kube-ps1.sh
    export KUBE_PS1_SYMBOL_ENABLE=false
    export KUBE_PS1_NS_ENABLE=false
    export KUBE_PS1_SYMBOL_COLOR=''
    export KUBE_PS1_CTX_COLOR=''
    export KUBE_PS1_NS_COLOR=''

    # Omit prefix of path longer than 50 characters
    __droppath () {
        if [[ ${#1} -gt 50 ]]; then
            p=$1
            while [ ${#p} -gt 50 ]; do
                p="/"$(echo "$p"|cut -d"/" -f3-)
            done
            echo "..."$p
        else
            echo $1
        fi
    }


    # Define prompt
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
      PS1="\[\033[1;32m\]\u.\h\[\033[0m\]:" # username.hostname
      declare -f kube_ps1 > /dev/null; # check for kube prompt
      if [ 0 -eq $? ]; then
        PS1+='$(kube_ps1)' # kube prompt
        kubeoff # off by default
      fi
      declare -f __git_ps1 > /dev/null; # check for git prompt
      if [ 0 -eq $? ]; then
        PS1+="\[\033[1;35m\]"'$(__git_ps1 "(%s)")' # git prompt
      fi
      PS1+="\[\033[1;94m\]"'$(__droppath "\w")' # current working directory
      PS1+="\[\033[0m\]\$ " # dollar sign
    else
      PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    fi
    fi  # LITE


### Command aliases

    # Allows using aliases after 'sudo' command.
    alias sudo='sudo '

    # Basic shell commands.
    alias ll='ls -lh'
    alias la='ls -alh'
    alias ls='ls -F --color=auto'
    alias ls..='ls ..'
    alias sl='ls'
    alias dir='ls'
    alias cd..='cd ..'
    alias cd...='cd ../../'
    alias cd....='cd ../../../'
    alias cd.....='cd ../../../../'
    alias vi='vim'
    alias md='mkdir'
    alias mdkri='mkdir'
    alias cls='clear'
    alias vim2='vim.nox-py2'

    # Typo fixes
    alias amke='make'
    alias amek='make'
    alias mkae='make'
    alias maek='make'
    alias aemk='make'
    alias suod='sudo'
    alias gti='git'
    alias elss='less'
    alias Less='less'
    alias Grep='grep'
    alias wokron='workon'
    alias workno='workon'
    alias dockr='docker'
    alias doker='docker'
    alias electorn='electron'
    alias ndoe='node'
    alias fiel='file'
    alias iv='vi'

    # Tmux.
    alias tl='tmux ls'
    alias tma='tmux attach -t'
    alias tmux='tmux -2'

    # binary analysis.
    alias gdb='gdb -q'
    alias ustrings='strings -e l'
    alias bobjdump='objdump -b binary -m i386 -M intel -D'
    alias bobjdump32='objdump -b binary -m i386 -M intel -D'
    alias bobjdump64='objdump -b binary -m i386:x86-64 -M intel -D'
    alias bobjdump16='objdump -b binary -m i8086 -M intel -D'

    # Even shorter git aliases.
    alias gl='git lg'
    alias gla='git lg --all'

    # Python.
    alias py='python'
    alias py2='python2'
    alias py3='python3'
    alias simplehttp='python -m SimpleHTTPServer'

    # Docker
    alias dpa='docker ps -a'
    alias dim='docker images'
    alias doco='docker-compose'

    # Other tool options
    alias tree='tree -C'
    alias tree2='tree -L 2'
    alias tree3='tree -L 3'
    alias itree="tree -I '*.pyc|__pycache__|*.o|*.out'"
    alias grep='grep --color=auto'
    alias less='less -R'
    alias svn='svn --config-dir $HOME/.config/.subversion'
    alias lynx='lynx -accept_all_cookies'
    alias ctags-all='ctags -R --c++-kinds=+p --fields=iaS --extra=+q'
    alias euckr='iconv -f EUC-KR -t UTF8'
    alias sublime='/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl'
    alias vscode='/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code'
    alias skim='open -a Skim'
    alias memcheck='valgrind --leak-check=full --tool=memcheck'
    alias ptdumpex='ptdump --raw --lastip'
    alias ns='netstat -nltp'
    alias nspublic='sudo ns | grep "0 0.0.0.0:" | sort -n'
    alias wget='wget --hsts-file=$HOME/.config/.wget-hsts'
    alias hh='npx hardhat'

### Utility functions

    # Wrappers to scripts
    myip() {
      $SCRIPTS_DIR/myip.py $*
    }

    vbox () {
      $SCRIPTS_DIR/vbox.py $*
    }

    git-change-url() {
      $SCRIPTS_DIR/git-change-url.py
    }

    git-nopush() {
      $SCRIPTS_DIR/git-nopush.py
    }

    maketex () {
      $SCRIPTS_DIR/maketex.sh $*
    }

    # Docker related
    docker-enable () {
      bash --login '/Applications/Docker/Docker Quickstart Terminal.app/Contents/Resources/Scripts/start.sh'
    }

    docker-remove-dangling-images () {
      docker rmi $(docker images -q -f dangling=true)
    }

    docker-remove-stopped-instances () {
      docker rm $(docker ps -aq)
    }

    docker-disk-cleanup () {
      set -x
      docker system prune -a -f
      docker images -qf dangling=true | xargs docker rmi
      docker volume ls -qf dangling=true | xargs -r docker volume rm
      set +x
    }

    docker-ip () {
      docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$@"
    }

    docker-dedup () {
        $SCRIPTS_DIR/docker-image-dedup.py
    }

    # Others
    dus () {
        du -h -d 1 $* | sort -h --reverse
    }

    cache-flush () {
      echo 1 | sudo tee /proc/sys/vm/drop_caches
    }

    pyclean () {
      find . -name "*.pyc" -delete -print
      find . -name "__pycache__" -delete -print
    }

    loc() {
      if [ $# -eq 0 ]; then
        dir="."
      else
        dir="$1"
      fi
      find "$dir" -type f \
          | egrep -v "node_modules|artifacts|.git" \
          | egrep ".*(c|h|cc|cpp|hpp|py|go|java|sh|bash|yaml|yml)" \
          | xargs wc -l | sort -n
    }

    fkill () {
        local pids
        pids=$(ps auf | sed 1d | fzf -m | awk '{print $2}')
        if [ "x$pids" != "x" ]; then
            echo $pids | xargs kill -${1:-9}
        fi
    }

    usbserial () {
        # Silicon Labs USB-to-UART driver
        screen $(ls /dev/tty.SLAB*) 115200
    }

    ida () {
        ~/Applications/IDA/ida.app/Contents/MacOS/ida "$@" &
    }

    ida64 () {
        ~/Applications/IDA/ida64.app/Contents/MacOS/ida64 "$@" &
    }

### Bash settings

    # check the window size after each command and, if necessary,
    # update the values of LINES and COLUMNS.
    shopt -s checkwinsize

    # Press Tab to use the traditional match method.
    bind '"\t": complete'
    # Match case insensitive
    bind 'set completion-ignore-case on'

    # make less more friendly for non-text input files, see lesspipe(1)
    [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

    # Share bash history across tmux panes and windows.
    #shopt -s histappend
    #PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

### External tools

    # Create .config directory to (try) to shove in all dotfiles
    mkdir -p "$HOME/.config"

    source_if_exists() {
      [ -f "$1" ] && source "$1"
    }
    source_if_exists "$HOME/.bashrc.conf"

    source_if_enabled() {
      [ "$1" = "1" ] && source_if_exists "$2"
    }

    source_if_enabled $BASHRC_USE_rvm "$HOME/.rvm/scripts/rvm"
    source_if_enabled $BASHRC_USE_venv /usr/local/bin/virtualenvwrapper.sh
    source_if_enabled $BASHRC_USE_fzf "$HOME/.config/.fzf.bash"
    [ "$BASHRC_USE_nvm" = "1" ] && mkdir -p "$NVM_DIR"
    source_if_enabled $BASHRC_USE_nvm "$NVM_DIR/nvm.sh"
    source_if_enabled $BASHRC_USE_nvm "$NVM_DIR/bash_completion"

    if ! shopt -oq posix; then
      source_if_exists /etc/profile.d/bash_completion.sh
      source_if_exists /usr/share/bash-completion/completions/git
      source_if_exists "$SCRIPTS_DIR/git-completion.bash"
      source_if_exists "$HOME/.asdf/asdf.sh"
    fi

    type brew >/dev/null 2>/dev/null
    if [ "$?" = "0" ]; then
        source_if_enabled $BASHRC_USE_completion "$(brew --prefix)/etc/bash_completion"
    fi

    type pyenv >/dev/null 2>/dev/null
    if [ "$?" = "0" ]; then
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)"
    fi

    source_if_exists /opt/openenclave/share/openenclave/openenclaverc
    source_if_exists "$SDKMAN_DIR/bin/sdkman-init.sh"
    source_if_exists "$HOME/.gvm/scripts/gvm"
    source_if_exists "$HOME/.config/tabtab/bash/__tabtab.bash"

    unset -f source_if_exists
    unset -f source_if_enabled

    run_ssh_agent () {
        # Create the ssh agent
        env=~/.ssh/agent.env
        test -f "$env" && . "$env" >| /dev/null

        # agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2= agent not running
        agent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?)

        if [ ! "$SSH_AUTH_SOCK" ] || [ $agent_run_state = 2 ]; then
            (umask 077; ssh-agent >| "$env")
            . "$env" >| /dev/null ;
            ssh-add
        elif [ "$SSH_AUTH_SOCK" ] && [ $agent_run_state = 1 ]; then
            ssh-add
        fi

        unset env
    }

    run_ssh_agent

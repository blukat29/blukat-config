# ~/.bashrc

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

### Environment variables

    # Before doing anything, replace OSX terminal tools with gnu version tools
    export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
    export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
    export PATH="/usr/local/bin:$PATH"

    # PATHs
    DOTFILES_DIR="$( cd "$( dirname $(readlink -e "${BASH_SOURCE[0]}") )" && pwd )"
    SCRIPTS_DIR="$DOTFILES_DIR/../scripts"
    export PATH="$PATH:$HOME/local/bin"
    export PATH="$PATH:/usr/local/sbin"
    export PATH="$PATH:$HOME/.local/bin"
    export PATH="$PATH:$SCRIPTS_DIR"
    export PATH="$PATH:/usr/local/sbin"
    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/.local/lib/"
    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib/"
    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib/python2.7/site-packages/PySide/"

    # Other options
    export LESSHISTFILE=/dev/null
    export HISTCONTROL=ignoreboth # don't put duplicate items in bash_history


### Bash prompt

    # Enable git-prompt
    source $SCRIPTS_DIR/git-prompt.sh
    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWSTASHSTATE=1
    export GIT_PS1_SHOWUNTRACKEDFILES=1

    # Omit prefix of path longer than 50 characters
    __droppath () {
        if [[ ${#1} -gt 50 ]]; then
            p=$1
            while [ ${#p} -gt 50 ]; do
                p="/"$(echo "$p"|cut -d"/" -f3-)
            done
            echo "..."$p
        else
            echo $1
        fi
    }

    # Define prompt
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
      PS1="\[\033[1;32m\]\u\[\033[0m\]:" # username
      PS1+="\[\033[1;35m\]"'$(__git_ps1 "(%s)")' # git -prompt
      PS1+="\[\033[1;34m\]"'$(__droppath "\w")' # current working directory
      PS1+="\[\033[0m\]\$ " # dollar sign
    else
      PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    fi


### Command aliases

    alias ll='ls -alh'
    alias ls='ls -F --color=auto'
    alias dir='ls'
    alias cls='clear'
    alias grep='grep --color=auto'
    alias tma='tmux attach -t'
    alias tl='tmux ls'
    alias tmux='tmux -2'
    alias less='less -R'
    alias gdb='gdb -q -x gdbinit'
    alias ustrings='strings -e l'
    alias gl='git lg'
    alias cd..='cd ..'
    alias cd...='cd ../../'
    alias cd....='cd ../../../'
    alias cd.....='cd ../../../../'
    alias ls..='ls ..'
    alias vi='vim'
    alias bobjdump='objdump -b binary -m i386 -M intel -D'
    alias bobjdump64='objdump -b binary -m i386:x86_64 -M intel -D'
    alias bobjdump16='objdump -b binary -m i8086 -M intel -D'
    alias simplehttp='python -m SimpleHTTPServer'
    alias tree='tree -C'
    alias py='python'
    alias py3='python3'
    alias dockr='docker'
    alias doker='docker'
    alias md='mkdir'
    alias mdkri='mkdir'
    alias euckr='iconv -f EUC-KR -t UTF8'


### Utility functions

    sqlite3() {
      python $SCRIPTS_DIR/sqlite_runner.py $*
    }

    git-stats() {
      python $SCRIPTS_DIR/git-calendar.py
    }

    cgc2elf() {
      python $SCRIPTS_DIR/cgc2elf.py $*
    }

    docker-enable () {
      bash --login '/Applications/Docker/Docker Quickstart Terminal.app/Contents/Resources/Scripts/start.sh'
    }

    vbox () {
      python $SCRIPTS_DIR/vbox.py $*
    }

    dus () {
        du -h -d 1 $* | sort -h --reverse
    }

    docker-remove-dangling-images () {
      sudo docker rmi $(sudo docker images -q -f dangling=true)
    }

    docker-remove-stopped-instances () {
      sudo docker rm $(sudo docker ps -aq)
    }

    cache-flush () {
      echo 1 | sudo tee /proc/sys/vm/drop_caches
    }

    markd () {
      python $SCRIPTS_DIR/markd.py $*
    }

    myip() {
      python $SCRIPTS_DIR/myip.py
    }

### Bash settings

    # check the window size after each command and, if necessary,
    # update the values of LINES and COLUMNS.
    shopt -s checkwinsize

    # Press Tab to get one of possible matches. Press again to get next match.
    bind '"\t": menu-complete'
    # Press Shift-Tab to use the traditional match method.
    bind '"\e[Z": complete'
    # Match case insensitive
    bind 'set completion-ignore-case on'

    # make less more friendly for non-text input files, see lesspipe(1)
    [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"


### External tools

    export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting

    if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
        source /usr/local/bin/virtualenvwrapper.sh
    fi


"   File structure
" Vundle plugins
" General settings
" File type specific settings
" Omnicomplete settings
" Plugin settings
" Keyboard shortcuts

" #### Vim Plugins ############################
set nocompatible  " it must be the first line to enable Vim features.

" Auto-install vim-plug.
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')

" Colorscheme
Plug 'crusoexia/vim-monokai'
Plug 'junegunn/seoul256.vim'
Plug 'dracula/vim', { 'as': 'dracula' }

" Autocomplete
Plug 'ervandew/supertab'            " Use <Tab>
Plug 'MarcWeber/vim-addon-mw-utils' " dependency
Plug 'tomtom/tlib_vim'              " dependency
Plug 'garbas/vim-snipmate'          " driver
Plug 'honza/vim-snippets'           " snippet database
Plug 'junegunn/vim-easy-align'      " Align assignment statements

" Head-up display (HUD)
Plug 'bling/vim-airline'      " Status line
Plug 'airblade/vim-gitgutter' " Modify indicator
Plug 'tpope/vim-fugitive'     " Detect branch, run git command
Plug 'majutsushi/tagbar'      " Tags from ctags
Plug 'ronakg/quickr-cscope.vim'

" Language specific
Plug 'davidhalter/jedi-vim'      " Python autocomplete
Plug 'fisadev/vim-isort'         " Python import sort
Plug 'nvie/vim-flake8'           " Python linter
Plug 'agatan/vim-sort-include'   " C/C++ #include sort
Plug 'octol/vim-cpp-enhanced-highlight' " C/C++ syntax highlight
Plug 'blukat29/vim-llvm-lite'    " LLVM IR and TableGen
Plug 'alvan/closetag.vim'        " html auto close
Plug 'gregsexton/MatchTag'       " html highlight matching tags
Plug 'tmux-plugins/vim-tmux'     " tmux.conf
Plug 'fatih/vim-go'              " Golang
Plug 'leafOfTree/vim-vue-plugin' " Vue.js
Plug 'kchmck/vim-coffee-script'  " CoffeeScript
Plug 'tomlion/vim-solidity'      " Solidity
Plug 'derekwyatt/vim-scala'      " Scala
Plug 'instant-markdown/vim-instant-markdown' " Markdown

call plug#end()

" #### General ###################################
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent

syntax on       " syntax highlight
set hlsearch    " highlight search result
set number      " line numbers
set nowrap      " don't wrap long sentences
set viminfo=""  " disable viminfo
set nomodeline

set scrolloff=3   " Keep 3 lines above and below cursor.
set laststatus=2  " Always turn on status line
set backspace=indent,eol,start  " Make backspace work as other editors
set tags=~/.vim/tags,tags;    " Read local tags file

" #### File type specific ########################

" File type mappings
autocmd BufNewFile,BufRead Dockerfile set filetype=config
autocmd BufNewFile,BufRead *.phps set filetype=php
autocmd BufNewFile,BufRead *.cup set filetype=java
autocmd BufNewFile,BufRead *.flex set filetype=java
autocmd BufNewFile,BufRead *.json set filetype=javascript
autocmd BufNewFile,BufRead bashrc set filetype=sh
autocmd BufNewFile,BufRead gitconfig set filetype=gitconfig
autocmd BufNewFile,BufRead gitconfig.common set filetype=gitconfig
autocmd BufNewFile,BufRead vimrc set filetype=vim
autocmd BufNewFile,BufRead Vagrantfile set filetype=ruby
autocmd BufNewFile,BufRead *.md set filetype=markdown
autocmd BufNewFile,BufRead *.ts set filetype=javascript " TypeScript
autocmd BufNewFile,BufRead *.ejs set filetype=html " EJS template
autocmd BufNewFile,BufRead *.edl set filetype=cpp " Enclave EDL
autocmd BufNewFile,BufRead *.gyp set filetype=javascript " GYP build system
autocmd BufNewFile,BufRead Jenkinsfile set filetype=groovy "Jenkins CI configuration
autocmd BufNewFile,BufRead *.tmpl set filetype=gohtmltmpl " Go template
autocmd BufNewFile,BufRead *.vue set filetype=html " Vue.js

" Tab setting exceptions
autocmd Filetype javascript setlocal expandtab ts=2 sw=2 sts=2
autocmd Filetype css setlocal expandtab ts=2 sw=2 sts=2
autocmd Filetype html setlocal expandtab ts=2 sw=2 sts=2
autocmd Filetype htmldjango setlocal expandtab ts=2 sw=2 sts=2
autocmd Filetype xml setlocal expandtab ts=2 sw=2 sts=2
autocmd Filetype yaml setlocal expandtab ts=2 sw=2 sts=2
autocmd Filetype groovy setlocal expandtab ts=2 sw=2 sts=2

" Override syntax highlighting
" Highlights arrow function (=>), underscore.js (_), lodash (_), jquery ($) APIs.
" Also highlights member variables.
function! SetJsHi()
    syn match   javaScriptUtilLib /\(\(_\|\$\)\.\w\+\)/
    syn match   javaScriptArrow   /=>/
    syn keyword javaScriptAsync   async
    syn keyword javaScriptAwait   await

    hi  link    javaScriptUtilLib Repeat
    hi  link    javaScriptArrow   Keyword
    hi  link    javaScriptAsync   Keyword
    hi  link    javaScriptAwait   Statement
endfunction
autocmd BufNewFile,BufRead *.js call SetJsHi()

" #### Omnicomplete ##############################

" Turn on omnicomplete
set omnifunc=syntaxcomplete#Complete
set completeopt=longest,menuone
autocmd BufNewFile,BufRead,BufEnter *.c,*.cc,*.cpp,*.h,*.hh,*.hpp set omnifunc=omni#cpp#complete#Main

" Omnicomplete settings
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]

" #### Plugins ###################################

let g:snipMate = { 'snippet_version' : 1 }

" airline
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline#extensions#hunks#enabled = 1
let g:airline#extensions#branch#enabled = 1

" GitGutter
let g:gitgutter_sign_removed = "-"
let g:gitgutter_sign_removed_first_line = "^"
let g:gitgutter_map_keys = 0
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0
autocmd BufWritePost * GitGutter

" TagBar
let g:tagbar_map_closeallfolds = "_"
let g:tagbar_map_openfold = "="
let g:tagbar_autofocus = 1
let g:tagbar_iconchars = ['+', '-']
let g:tagbar_width = 50
let g:tagbar_sort = 0
let g:tagbar_foldlevel = 2
let g:tagbar_type_solidity = {
    \ 'ctagstype': 'solidity',
    \ 'kinds' : [
        \ 'c:contracts',
        \ 'e:events',
        \ 'f:functions',
        \ 'm:mappings',
        \ 'v:varialbes',
    \ ]
\ }

" Jedi-Vim
" no documentation window during completion.
autocmd FileType python setlocal completeopt-=preview
let g:jedi#show_call_signatures = 0

" Flake8
let g:flake8_show_in_gutter = 1

" CloseTag
let g:closetag_html_style=1

" Go
if 1
  " Loose formatter
  let g:go_fmt_autosave  = 1
  let g:go_fmt_command   = 'gofmt'
  let g:go_imports_autosave = 1
  let g:go_imports_mode  = 'goimports'
else
  " Stricter formatter
  let g:go_fmt_command   = 'gopls'
  let g:go_gopls_gofumpt = 1
endif
let g:go_auto_sameids                = 0
let g:go_auto_type_info              = 0
let g:go_highlight_types             = 1
let g:go_highlight_fields            = 0
let g:go_highlight_functions         = 1
let g:go_highlight_function_calls    = 0
let g:go_highlight_build_constraints = 1
hi def link goTypeConstructor Type
hi def link goReceiverType    Type
hi def link goTypeName        Type
hi def link goField           Function
hi def link goFunctionCall    Function

" Vue.js
let g:vim_vue_plugin_config = {
      \'syntax': {
      \   'template': ['html'],
      \   'script': ['javascript'],
      \   'style': ['css'],
      \},
      \'full_syntax': [],
      \'initial_indent': [],
      \'attribute': 0,
      \'keyword': 0,
      \'foldexpr': 0,
      \'debug': 0,
      \}

" InstantMarkdown
let g:instant_markdown_slow = 1 " no realtime update; re-renders on save.
let g:instant_markdown_autostart = 0
let g:instant_markdown_allow_external_content = 1
let g:instant_markdown_mathjax = 1
let g:instant_markdown_autoscroll = 0
let g:instant_markdown_python = 0

let s:instant_markdown_running = 0
function! s:toggle_instant_markdown()
    if s:instant_markdown_running
        InstantMarkdownStop
        let s:instant_markdown_running = 0
    else
        InstantMarkdownPreview
        let s:instant_markdown_running = 1
    endif
endfunction
command! -nargs=0 InstantMarkdownToggle call s:toggle_instant_markdown()

" #### Coloring ##################################

if (&term == "screen-256color") || (&term =~ "term")
  set t_Co=256
  set bg=dark
  silent! colorscheme seoul256
  hi Normal ctermbg=none ctermfg=254
  hi Comment ctermfg=245
  hi LineNr ctermbg=none
  hi GitGutterAdd ctermbg=none
  hi GitGutterChange ctermbg=none
  hi GitGutterDelete ctermbg=none
  hi GitGutterChangeDelete ctermbg=none
else
  colorscheme default
endif

" Color 100th column
function! s:toggle_color_column()
    if &colorcolumn > 0
        set colorcolumn=
    else
        set colorcolumn=100
    endif
endfunction
command! -nargs=0 ColorColumnToggle  call s:toggle_color_column()

" #### Keyboard shortcuts #########################

" <Tab> Move between splits
nnoremap <Tab> <C-w>w

" <Ctrl-L> redraws the screen and removes any search highlights
nnoremap <silent> <C-l> :nohl<CR><C-l>

" <Ctrl-P> Toggle paste mode
set pastetoggle=<C-p>

" <:wq> Map common mistakes
cnoreabbrev WQ wq
cnoreabbrev Wq wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Set set
" Prevent writing to a file named ';'.
cnoreabbrev w; w

" <F5> Quickly compile C/C++
autocmd FileType c,cpp nnoremap <buffer> <F5> :w<CR>:make %<CR>
autocmd FileType c,cpp inoremap <buffer> <F5> <Esc>:w<CR>:make %<CR>
autocmd FileType c
  \ if !filereadable('Makefile') && !filereadable('makefile') |
  \   setlocal makeprg=gcc\ -o\ %< |
  \ endif
autocmd FileType cpp
  \ if !filereadable('Makefile') && !filereadable('makefile') |
  \   setlocal makeprg=g++\ -o\ %< |
  \ endif

" <F5> Quickly run python
autocmd FileType python nnoremap <buffer> <F5> :w<CR>:!python %<CR>
autocmd FileType python inoremap <buffer> <F5> <Esc>:w<CR>:!python %<CR>

" <F7> Remove trailing whitespaces
" Trailing Whitespace
hi TrailingWhitespace ctermbg=red
match TrailingWhitespace /\s\+$/
command! RemoveTrailingWhitespace :%s/\s\+$//
nmap <F7> :RemoveTrailingWhitespace<CR>

" <F8> TagBar plugin
nmap <F8> :TagbarToggle<CR>

" <F9> Toggle color columns
nmap <F9> :ColorColumnToggle<CR>

" <F10> Instant markdown
nmap <F10> :InstantMarkdownToggle<CR>

" <:ga> Easy align
xmap ga <Plug>(EasyAlign)

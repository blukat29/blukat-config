
"   File structure
" Vundle plugins
" General settings
" Keyboard shortcuts
" File type specific settings
" Omnicomplete settings
" Plugin settings

" #### Vim Plugins ############################
set nocompatible  " it must be the first line to enable Vim features.

" Auto-install vim-plug.
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')

" Colorscheme
Plug 'crusoexia/vim-monokai'

" Autocomplete with tab key
Plug 'ervandew/supertab'

" Snippet autocomplete
Plug 'MarcWeber/vim-addon-mw-utils' " dependency
Plug 'tomtom/tlib_vim' " dependency
Plug 'garbas/vim-snipmate' " driver
Plug 'honza/vim-snippets' " snippet database

" Head-up display (HUD)
Plug 'bling/vim-airline'
Plug 'airblade/vim-gitgutter'
Plug 'majutsushi/tagbar'

" Language specific
Plug 'davidhalter/jedi-vim' " Python autocomplete
Plug 'fisadev/vim-isort' " Python import sort
Plug 'agatan/vim-sort-include' " C/C++ #include sort
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'fatih/vim-go'
Plug 'derekwyatt/vim-scala'
Plug 'vim-scripts/closetag.vim' " html/xml auto close
Plug 'gregsexton/MatchTag' " highlight matching tags
Plug 'junegunn/vim-easy-align' " Align assignment statements
Plug 'tmux-plugins/vim-tmux'
Plug 'nvie/vim-flake8'

call plug#end()

" #### General ###################################
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent

syntax on       " syntax highlight
set hlsearch    " highlight search result
set number      " line numbers
set nowrap      " don't wrap long sentences
set viminfo=""  " disable viminfo

set scrolloff=3   " Keep 3 lines above and below cursor.
set laststatus=2  " Always turn on status line
set backspace=indent,eol,start  " Make backspace work as other editors
set tags=~/.vim/tags,tags;    " Read local tags file

" #### Keyboard shortcut #########################

" <Ctrl-l> redraws the screen and removes any search highlights
nnoremap <silent> <C-l> :nohl<CR><C-l>

" Map common mistakes.
command! WQ wq
command! Wq wq
command! W w
command! Q q

" Move between splits
nnoremap <Tab> <C-w>w

" #### File type specific ########################

" File type mappings
autocmd BufNewFile,BufRead Dockerfile set filetype=config
autocmd BufNewFile,BufRead *.phps set filetype=php
autocmd BufNewFile,BufRead *.cup set filetype=java
autocmd BufNewFile,BufRead *.flex set filetype=java
autocmd BufNewFile,BufRead *.json set filetype=javascript
autocmd BufNewFile,BufRead bashrc set filetype=sh
autocmd BufNewFile,BufRead gitconfig set filetype=gitconfig
autocmd BufNewFile,BufRead gitconfig.common set filetype=gitconfig
autocmd BufNewFile,BufRead vimrc set filetype=vim
autocmd BufNewFile,BufRead Vagrantfile set filetype=ruby
autocmd BufNewFile,BufRead *.md set filetype=markdown
autocmd BufNewFile,BufRead *.ts set filetype=javascript " TypeScript

" Tab setting exceptions
autocmd Filetype html setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2
autocmd Filetype xml setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2

" #### Omnicomplete ##############################

" Turn on omnicomplete
set omnifunc=syntaxcomplete#Complete
set completeopt=longest,menuone
autocmd BufNewFile,BufRead,BufEnter *.c,*.cc,*.cpp,*.h,*.hh,*.hpp set omnifunc=omni#cpp#complete#Main

" Omnicomplete settings
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]

" #### Plugins ###################################

" Remove trailing whitespaces
command RemoveTrailingWhitespaces %s/\s\+$//

" Jedi-Vim - no documentation window during completion.
autocmd FileType python setlocal completeopt-=preview
let g:jedi#show_call_signatures = 0

" Vim-airline
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline#extensions#hunks#enabled = 1
let g:airline#extensions#branch#enabled = 1

" GitGutter
let g:gitgutter_sign_removed = "-"
let g:gitgutter_sign_removed_first_line = "^"
let g:gitgutter_map_keys = 0
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0

" TagBar
nmap <F8> :TagbarToggle<CR>
let g:tagbar_map_closeallfolds = "_"
let g:tagbar_map_openfold = "="
let g:tagbar_autofocus = 1
let g:tagbar_iconchars = ['+', '-']
let g:tagbar_width = 50
let g:tagbar_sort = 0

" Easy align
xmap ga <Plug>(EasyAlign)

let g:flake8_show_in_gutter = 1

" #### Coloring ##################################

if (&term == "screen-256color") || (&term =~ "term")
  set t_Co=256
  silent! colorscheme monokai
  hi Normal ctermbg=none ctermfg=253
  hi Comment ctermfg=245
  hi LineNr ctermbg=none
else
  colorscheme default
endif

" Trailing Whitespace
hi TrailingWhitespace ctermbg=red
match TrailingWhitespace /\s\+$/
command! RemoveTrailingWhitespace :%s/\s\+$//


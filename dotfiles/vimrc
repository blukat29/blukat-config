
" Vundle
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'

Plugin 'ervandew/supertab.git'
Plugin 'davidhalter/jedi-vim'

Plugin 'closetag.vim'
Plugin 'gregsexton/MatchTag'

Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'

Plugin 'bling/vim-airline'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'

call vundle#end()
filetype plugin indent on

" General
set tabstop=2
set shiftwidth=2
set expandtab
set autoindent
syntax on
set number
set hlsearch
set tags=~/pintos/src/tags
set nowrap
set viminfo=""

" Assign dotfiles filetype=sh
autocmd BufNewFile,BufRead aliases,exports,functions,prompts set filetype=sh

" Python specific tab settings.
autocmd BufNewFile,BufRead *.wsgi set filetype=python
autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4

" Assign .phps to php type
autocmd BufNewFile,BufRead *.phps set filetype=php

" Close Omni-Completion tip window when leaving insert mode
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <silent> <C-l> :nohl<CR><C-l>

" Map common mistakes.
command! WQ wq
command! Wq wq
command! W w
command! Q q

" Vertical split
nnoremap <Tab> <C-w>w

" Easytags
let g:easytags_dynamic_files = 1
let g:easytags_events = ['BufWritePost','VimEnter','BufEnter','Winenter']
let g:easytags_suppress_report = 1

" Jedi-Vim - no documentation window during completion.
autocmd FileType python setlocal completeopt-=preview

" Statusline
set laststatus=2   " Always on
set statusline=\ %{FileName()}         " Filename with links resolved
set statusline+=\ %<(%{FileSize()})    " File size in human readable format
set statusline+=\ %3(%m%)%4(%r%)%y     " Modified? Readonly? Filetype
set statusline+=\[%{FileEncoding()}\]  " File encoding.
set statusline+=%=                     " End leftalign. Start rightalign.
set statusline+=%l/%L\ (%P)            " currentLine/totalLines (percentage)
set statusline+=\ :%2(%c%)             " column
set statusline+=\ %15{FileTime()}\     " Last modified time relative to now.

" Vim-airline
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline#extensions#hunks#enabled = 1
let g:airline#extensions#branch#enabled = 1

" GitGutter
let g:gitgutter_sign_removed = "-"
let g:gitgutter_map_keys = 0
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0

" Coloring
if &term == "xterm" || &term == "screen"

  hi clear
  set t_Co=256

  colorscheme default

  hi Question cterm=bold,underline ctermfg=Cyan
  hi Comment ctermfg=blue
  hi LineNr ctermfg=248
  hi ErrorMsg cterm=bold,underline ctermfg=Red ctermbg=none
  hi WarningMsg cterm=bold,underline ctermfg=Red ctermbg=none
  hi Visual cterm=bold ctermbg=236
  hi Search cterm=bold ctermfg=White ctermbg=DarkBlue
  hi StatusLine cterm=bold,underline ctermfg=White ctermbg=234
  hi StatusLineNC cterm=bold,underline ctermfg=247 ctermbg=234
  hi Pmenu ctermfg=Grey
  hi PmenuSel ctermfg=Black
  hi VertSplit cterm=none ctermfg=248 ctermbg=236
  hi FoldColumn ctermfg=119 ctermbg=236
  hi SignColumn ctermbg=Black

else

  hi clear
  colorscheme default

endif

" Trailing Whitespace
hi TrailingWhitespace ctermbg=red
match TrailingWhitespace /\s\+$/

" Functions
function! FileName()
  let fn = expand('%')
  if fn == ""
    return "[nonamed]"
  else
    return split(resolve(fn), '/')[-1]
  endif
endfunction

function! FileSize()
  let bytes = getfsize(expand("%:p"))
  if bytes <= 0
    return "0B"
  endif
  if bytes<1024
    return bytes."B"
  else
    return (bytes/1024)."KB"
  endif
endfunction

function! FileEncoding()
  if &fenc == ''
    return &fenc
  else
    return &enc
  endif
endfunction

function! FileTime()
  if getftime(expand('%')) < 0
    return "new file"
  endif
  let tm = localtime() - getftime(expand('%'))
  if tm < 60
    return tm." seconds ago"
  elseif tm < 60*60
    return (tm/60)." minutes ago"
  elseif tm < 60*60*24
    return (tm/60/60)." hours ago"
  elseif tm < 60*60*24*14
    return (tm/60/60/24)." days ago"
  elseif tm < 60*60*24*60
    return (tm/60/60/24/7)." weeks ago"
  else
    return " 2 months or older"
  endif
endfunction

